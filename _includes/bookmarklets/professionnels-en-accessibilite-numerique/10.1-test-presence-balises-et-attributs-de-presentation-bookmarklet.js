javascript:(function () { const msgBgColor = '#f2ce09'; const borderColor = 'red'; const deprecatedElements = [ 'basefont', 'blink', 'big', 'center', 'font', 'marquee', 's', 'strike', 'tt', 'u' ]; const deprecatedAttributes = [ 'align', 'alink', 'background', 'basefont', 'bgcolor', 'border', 'color', 'link', 'text', 'vlink', 'cellpadding', 'cellspacing' ]; const allowedWidthHeightElements = ['img', 'svg', 'canvas', 'embed', 'object', 'rect', 'circle', 'ellipse', 'line', 'polyline', 'polygon', 'path']; function addVisualIndicator(element, message) { element.style.border = `3px solid ${borderColor}`; element.style.outline = `3px solid ${borderColor}`; const label = document.createElement('span'); label.textContent = message; label.style.backgroundColor = msgBgColor; label.style.position = 'absolute'; label.style.zIndex = '9999'; label.style.padding = '2px 4px'; label.style.fontSize = '12px'; label.style.fontWeight = 'bold'; label.style.border = '1px solid #000'; label.style.pointerEvents = 'none'; const rect = element.getBoundingClientRect(); label.style.left = rect.left + 'px'; label.style.top = (rect.top - 20) + 'px'; document.body.appendChild(label); } deprecatedElements.forEach(tagName => { const elements = document.getElementsByTagName(tagName); Array.from(elements).forEach(element => { addVisualIndicator(element, `<${tagName}>`); }); }); deprecatedAttributes.forEach(attr => { const elements = document.querySelectorAll(`[${attr}]`); Array.from(elements).forEach(element => { addVisualIndicator(element, `[attr:${attr}]`); }); }); const widthElements = document.querySelectorAll('[width]'); const heightElements = document.querySelectorAll('[height]'); Array.from(widthElements).forEach(element => { if (!allowedWidthHeightElements.includes(element.tagName.toLowerCase())) { addVisualIndicator(element, '[attr:width]'); } }); Array.from(heightElements).forEach(element => { if (!allowedWidthHeightElements.includes(element.tagName.toLowerCase())) { addVisualIndicator(element, '[attr:height]'); } }); const bothElements = document.querySelectorAll('[width][height]'); Array.from(bothElements).forEach(element => { if (!allowedWidthHeightElements.includes(element.tagName.toLowerCase())) { addVisualIndicator(element, '[attr:height & width]'); } }); let summary = '== RGAA 10.1 - Dépistage des balises et attributs de présentation ==\n\n'; deprecatedElements.forEach(tagName => { const count = document.getElementsByTagName(tagName).length; if (count > 0) { summary += `Éléments <${tagName}> : ${count}\n`; } }); deprecatedAttributes.forEach(attr => { const count = document.querySelectorAll(`[${attr}]`).length; if (count > 0) { summary += `Attributs [${attr}] : ${count}\n`; } }); const invalidWidthCount = Array.from(widthElements).filter(el => !allowedWidthHeightElements.includes(el.tagName.toLowerCase()) ).length; const invalidHeightCount = Array.from(heightElements).filter(el => !allowedWidthHeightElements.includes(el.tagName.toLowerCase()) ).length; if (invalidWidthCount > 0) { summary += `Attributs [width] invalides : ${invalidWidthCount}\n`; } if (invalidHeightCount > 0) { summary += `Attributs [height] invalides : ${invalidHeightCount}\n`; } alert(summary + '\n\n' + 'Voir la console pour plus de détails'); console.clear(); console.log(summary); console.log('=== Détail des éléments correspondants ==='); deprecatedElements.forEach(tagName => { const elements = document.getElementsByTagName(tagName); Array.from(elements).forEach(element => { console.log(`${tagName}::before { content: "<${tagName}>"; }`); console.log(element); }); }); deprecatedAttributes.forEach(attr => { const elements = document.querySelectorAll(`[${attr}]`); Array.from(elements).forEach(element => { console.log(`[${attr}]::before { content: "[attr:${attr}]"; }`); console.log(element); }); }); Array.from(widthElements).forEach(element => { if (!allowedWidthHeightElements.includes(element.tagName.toLowerCase())) { console.log(`:not(img, svg, canvas, embed, object)[width]::before { content: "[attr:width]"; }`); console.log(element); } }); Array.from(heightElements).forEach(element => { if (!allowedWidthHeightElements.includes(element.tagName.toLowerCase())) { console.log(`:not(img, svg, canvas, embed, object)[height]::before { content: "[attr:height]"; }`); console.log(element); } }); Array.from(bothElements).forEach(element => { if (!allowedWidthHeightElements.includes(element.tagName.toLowerCase())) { console.log(`:not(img, svg, canvas, embed, object)[width][height]::before { content: "[attr:height & width]"; }`); console.log(element); } }); })();